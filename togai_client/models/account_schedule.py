# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from togai_client.models.price_plan_info import PricePlanInfo
from togai_client.models.schedule_info import ScheduleInfo
from typing import Optional, Set
from typing_extensions import Self

class AccountSchedule(BaseModel):
    """
    AccountSchedule
    """ # noqa: E501
    id: StrictStr
    account_id: StrictStr = Field(alias="accountId")
    price_plan_id: StrictStr = Field(alias="pricePlanId")
    version: StrictInt
    deferred_revenue: StrictBool = Field(alias="deferredRevenue")
    price_plan_info: PricePlanInfo = Field(alias="pricePlanInfo")
    account_schedule_info: ScheduleInfo = Field(alias="accountScheduleInfo")
    is_overridden: Optional[StrictBool] = Field(default=None, description="Indicates whether the schedule is overridden. Note: A null value for this field does not imply that the schedule is not overridden. ", alias="isOverridden")
    start_date: datetime = Field(alias="startDate")
    end_date: datetime = Field(alias="endDate")
    allow_ongoing_cycle_updates: StrictBool = Field(alias="allowOngoingCycleUpdates")
    __properties: ClassVar[List[str]] = ["id", "accountId", "pricePlanId", "version", "deferredRevenue", "pricePlanInfo", "accountScheduleInfo", "isOverridden", "startDate", "endDate", "allowOngoingCycleUpdates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price_plan_info
        if self.price_plan_info:
            _dict['pricePlanInfo'] = self.price_plan_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account_schedule_info
        if self.account_schedule_info:
            _dict['accountScheduleInfo'] = self.account_schedule_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "accountId": obj.get("accountId"),
            "pricePlanId": obj.get("pricePlanId"),
            "version": obj.get("version"),
            "deferredRevenue": obj.get("deferredRevenue"),
            "pricePlanInfo": PricePlanInfo.from_dict(obj["pricePlanInfo"]) if obj.get("pricePlanInfo") is not None else None,
            "accountScheduleInfo": ScheduleInfo.from_dict(obj["accountScheduleInfo"]) if obj.get("accountScheduleInfo") is not None else None,
            "isOverridden": obj.get("isOverridden"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "allowOngoingCycleUpdates": obj.get("allowOngoingCycleUpdates")
        })
        return _obj


