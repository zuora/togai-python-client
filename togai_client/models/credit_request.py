# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreditRequest(BaseModel):
    """
    Payload to grant Credits
    """ # noqa: E501
    account_id: StrictStr = Field(alias="accountId")
    purpose: StrictStr
    applicable_entity_ids: Optional[List[StrictStr]] = Field(default=None, description="List of entity ids for which the credit is applicable. If null or empty, the credit is applicable to all ids. This list can accept special values like: - ALL_USAGE_METER_RATE_CARDS: To apply the credit to all usage meter rate cards - ALL_FIXED_FEE_RATE_CARDS: To apply the credit to all fixed fee rate cards ", alias="applicableEntityIds")
    effective_from: date = Field(alias="effectiveFrom")
    effective_until: Optional[date] = Field(default=None, alias="effectiveUntil")
    credit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="creditAmount")
    priority: StrictInt
    grantor_id: Optional[StrictStr] = Field(default=None, description="The entity through which the credit has been granted", alias="grantorId")
    idempotency_key: Optional[StrictStr] = Field(default=None, description="The idempotency key for uniqueness of the credit record", alias="idempotencyKey")
    __properties: ClassVar[List[str]] = ["accountId", "purpose", "applicableEntityIds", "effectiveFrom", "effectiveUntil", "creditAmount", "priority", "grantorId", "idempotencyKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "purpose": obj.get("purpose"),
            "applicableEntityIds": obj.get("applicableEntityIds"),
            "effectiveFrom": obj.get("effectiveFrom"),
            "effectiveUntil": obj.get("effectiveUntil"),
            "creditAmount": obj.get("creditAmount"),
            "priority": obj.get("priority"),
            "grantorId": obj.get("grantorId"),
            "idempotencyKey": obj.get("idempotencyKey")
        })
        return _obj


