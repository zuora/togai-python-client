# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from togai_client.models.invoice_timing import InvoiceTiming
from togai_client.models.rate_card_details import RateCardDetails
from togai_client.models.rate_card_type import RateCardType
from typing import Optional, Set
from typing_extensions import Self

class RateCard(BaseModel):
    """
    RateCard
    """ # noqa: E501
    billable_id: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Billable identifier", alias="billableId")
    type: RateCardType
    display_name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Display name of the rate card", alias="displayName")
    invoice_timing: InvoiceTiming = Field(alias="invoiceTiming")
    rate_card_details: RateCardDetails = Field(alias="rateCardDetails")
    tag: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Tag for rate card")
    name: Annotated[str, Field(strict=True, max_length=50)]
    reference_id: Annotated[str, Field(strict=True, max_length=50)] = Field(alias="referenceId")
    reference_type: Annotated[str, Field(strict=True, max_length=50)] = Field(alias="referenceType")
    currencies: Optional[List[StrictStr]] = Field(default=None, description="List of currencies supported by the rate card")
    price_plan_id: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Price plan identifier", alias="pricePlanId")
    account_id: Optional[StrictStr] = Field(default=None, description="Account identifier", alias="accountId")
    __properties: ClassVar[List[str]] = ["billableId", "type", "displayName", "invoiceTiming", "rateCardDetails", "tag", "name", "referenceId", "referenceType", "currencies", "pricePlanId", "accountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RateCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rate_card_details
        if self.rate_card_details:
            _dict['rateCardDetails'] = self.rate_card_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RateCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billableId": obj.get("billableId"),
            "type": obj.get("type"),
            "displayName": obj.get("displayName"),
            "invoiceTiming": obj.get("invoiceTiming"),
            "rateCardDetails": RateCardDetails.from_dict(obj["rateCardDetails"]) if obj.get("rateCardDetails") is not None else None,
            "tag": obj.get("tag"),
            "name": obj.get("name"),
            "referenceId": obj.get("referenceId"),
            "referenceType": obj.get("referenceType"),
            "currencies": obj.get("currencies"),
            "pricePlanId": obj.get("pricePlanId"),
            "accountId": obj.get("accountId")
        })
        return _obj


