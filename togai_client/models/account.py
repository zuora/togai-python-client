# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from togai_client.models.account_aliases import AccountAliases
from togai_client.models.accounts_billing_information import AccountsBillingInformation
from togai_client.models.address import Address
from togai_client.models.create_entity_setting import CreateEntitySetting
from togai_client.models.invoice_group_details import InvoiceGroupDetails
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Structure of an account
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Identifier of the account")
    togai_account_id: StrictStr = Field(description="Unique identifier of the account", alias="togaiAccountId")
    togai_customer_id: StrictStr = Field(description="Unique identifier of the customer", alias="togaiCustomerId")
    name: Annotated[str, Field(min_length=3, strict=True, max_length=255)] = Field(description="Name of the Account")
    customer_id: StrictStr = Field(description="Identifier of the customer", alias="customerId")
    invoice_currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="[ISO_4217](https://en.wikipedia.org/wiki/ISO_4217) code of the currency in which the account must be invoiced Defaults to Base currency. ", alias="invoiceCurrency")
    aliases: Optional[Annotated[List[AccountAliases], Field(min_length=0, max_length=10)]] = Field(default=None, description="list of aliases of the account")
    net_term_days: Optional[StrictInt] = Field(default=None, alias="netTermDays")
    address: Optional[Address] = None
    primary_email: Optional[Annotated[str, Field(strict=True, max_length=320)]] = Field(default=None, description="Primary email of the customer", alias="primaryEmail")
    billing_information: Optional[AccountsBillingInformation] = Field(default=None, alias="billingInformation")
    status: StrictStr = Field(description="Status of the account")
    settings: Optional[Annotated[List[CreateEntitySetting], Field(min_length=0, max_length=10)]] = None
    invoice_group_details: Optional[InvoiceGroupDetails] = Field(default=None, alias="invoiceGroupDetails")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional information associated with the account. Example: GSTN, VATN ")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tag for accounts are stored in lowercase")
    __properties: ClassVar[List[str]] = ["id", "togaiAccountId", "togaiCustomerId", "name", "customerId", "invoiceCurrency", "aliases", "netTermDays", "address", "primaryEmail", "billingInformation", "status", "settings", "invoiceGroupDetails", "metadata", "tags"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACTIVE', 'DRAFT', 'ARCHIVED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'DRAFT', 'ARCHIVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aliases (list)
        _items = []
        if self.aliases:
            for _item_aliases in self.aliases:
                if _item_aliases:
                    _items.append(_item_aliases.to_dict())
            _dict['aliases'] = _items
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_information
        if self.billing_information:
            _dict['billingInformation'] = self.billing_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in settings (list)
        _items = []
        if self.settings:
            for _item_settings in self.settings:
                if _item_settings:
                    _items.append(_item_settings.to_dict())
            _dict['settings'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice_group_details
        if self.invoice_group_details:
            _dict['invoiceGroupDetails'] = self.invoice_group_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "togaiAccountId": obj.get("togaiAccountId"),
            "togaiCustomerId": obj.get("togaiCustomerId"),
            "name": obj.get("name"),
            "customerId": obj.get("customerId"),
            "invoiceCurrency": obj.get("invoiceCurrency"),
            "aliases": [AccountAliases.from_dict(_item) for _item in obj["aliases"]] if obj.get("aliases") is not None else None,
            "netTermDays": obj.get("netTermDays"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "primaryEmail": obj.get("primaryEmail"),
            "billingInformation": AccountsBillingInformation.from_dict(obj["billingInformation"]) if obj.get("billingInformation") is not None else None,
            "status": obj.get("status"),
            "settings": [CreateEntitySetting.from_dict(_item) for _item in obj["settings"]] if obj.get("settings") is not None else None,
            "invoiceGroupDetails": InvoiceGroupDetails.from_dict(obj["invoiceGroupDetails"]) if obj.get("invoiceGroupDetails") is not None else None,
            "metadata": obj.get("metadata"),
            "tags": obj.get("tags")
        })
        return _obj


