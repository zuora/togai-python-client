# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from togai_client.models.invoice_details import InvoiceDetails
from togai_client.models.invoices_class import InvoicesClass
from togai_client.models.invoices_status import InvoicesStatus
from togai_client.models.invoices_type import InvoicesType
from typing import Optional, Set
from typing_extensions import Self

class InvoiceSummary(BaseModel):
    """
    Structure of invoice response
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Identifier of invoice")
    customer_id: Optional[StrictStr] = Field(default=None, alias="customerId")
    owner_id: Optional[StrictStr] = Field(default=None, alias="ownerId")
    price_plan_id: Optional[StrictStr] = Field(default=None, alias="pricePlanId")
    status: InvoicesStatus
    finalizing_status: Optional[StrictStr] = Field(default=None, alias="finalizingStatus")
    invoice_class: InvoicesClass = Field(alias="invoiceClass")
    invoice_type: InvoicesType = Field(alias="invoiceType")
    start_date: Optional[datetime] = Field(default=None, description="Start date of the invoice", alias="startDate")
    end_date: Optional[datetime] = Field(default=None, description="End date of the invoice", alias="endDate")
    end_date_inclusive: Optional[datetime] = Field(default=None, description="Inclusive end date of the invoice", alias="endDateInclusive")
    invoice_date: datetime = Field(description="Invoice date of the invoice", alias="invoiceDate")
    due_date: Optional[datetime] = Field(default=None, description="Due date of the invoice", alias="dueDate")
    generated_at: Optional[datetime] = Field(default=None, alias="generatedAt")
    updated_at: datetime = Field(alias="updatedAt")
    sequence_id: Optional[StrictStr] = Field(default=None, description="Sequence id of the invoice", alias="sequenceId")
    pdf_url: Optional[StrictStr] = Field(default=None, description="Download URL of the pdf file corresponding to the invoice", alias="pdfUrl")
    total_amount: Union[StrictFloat, StrictInt] = Field(alias="totalAmount")
    paid_amount: Union[StrictFloat, StrictInt] = Field(alias="paidAmount")
    invoice_details: Optional[InvoiceDetails] = Field(default=None, alias="invoiceDetails")
    net_term_days: StrictInt = Field(description="Number of days from the invoice date after which an invoice is considered overdue.", alias="netTermDays")
    __properties: ClassVar[List[str]] = ["id", "customerId", "ownerId", "pricePlanId", "status", "finalizingStatus", "invoiceClass", "invoiceType", "startDate", "endDate", "endDateInclusive", "invoiceDate", "dueDate", "generatedAt", "updatedAt", "sequenceId", "pdfUrl", "totalAmount", "paidAmount", "invoiceDetails", "netTermDays"]

    @field_validator('finalizing_status')
    def finalizing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FINALIZING', 'FINALIZED']):
            raise ValueError("must be one of enum values ('FINALIZING', 'FINALIZED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invoice_details
        if self.invoice_details:
            _dict['invoiceDetails'] = self.invoice_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "customerId": obj.get("customerId"),
            "ownerId": obj.get("ownerId"),
            "pricePlanId": obj.get("pricePlanId"),
            "status": obj.get("status"),
            "finalizingStatus": obj.get("finalizingStatus"),
            "invoiceClass": obj.get("invoiceClass"),
            "invoiceType": obj.get("invoiceType"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "endDateInclusive": obj.get("endDateInclusive"),
            "invoiceDate": obj.get("invoiceDate"),
            "dueDate": obj.get("dueDate"),
            "generatedAt": obj.get("generatedAt"),
            "updatedAt": obj.get("updatedAt"),
            "sequenceId": obj.get("sequenceId"),
            "pdfUrl": obj.get("pdfUrl"),
            "totalAmount": obj.get("totalAmount"),
            "paidAmount": obj.get("paidAmount"),
            "invoiceDetails": InvoiceDetails.from_dict(obj["invoiceDetails"]) if obj.get("invoiceDetails") is not None else None,
            "netTermDays": obj.get("netTermDays")
        })
        return _obj


