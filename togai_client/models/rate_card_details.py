# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from togai_client.models.billing_entitlement_rate_card import BillingEntitlementRateCard
from togai_client.models.credit_grant_rate_card import CreditGrantRateCard
from togai_client.models.entitlement_overage_rate_card import EntitlementOverageRateCard
from togai_client.models.fixed_fee_rate_card import FixedFeeRateCard
from togai_client.models.license_rate_card import LicenseRateCard
from togai_client.models.minimum_commitment import MinimumCommitment
from togai_client.models.usage_rate_card import UsageRateCard
from typing import Optional, Set
from typing_extensions import Self

class RateCardDetails(BaseModel):
    """
    Rate card details
    """ # noqa: E501
    fixed_fee_rate_card: Optional[FixedFeeRateCard] = Field(default=None, alias="fixedFeeRateCard")
    billing_entitlement_rate_card: Optional[BillingEntitlementRateCard] = Field(default=None, alias="billingEntitlementRateCard")
    credit_grant_rate_card: Optional[CreditGrantRateCard] = Field(default=None, alias="creditGrantRateCard")
    usage_rate_card: Optional[UsageRateCard] = Field(default=None, alias="usageRateCard")
    license_rate_card: Optional[LicenseRateCard] = Field(default=None, alias="licenseRateCard")
    entitlement_overage_rate_card: Optional[EntitlementOverageRateCard] = Field(default=None, alias="entitlementOverageRateCard")
    minimum_commitment_rate_card: Optional[MinimumCommitment] = Field(default=None, alias="minimumCommitmentRateCard")
    __properties: ClassVar[List[str]] = ["fixedFeeRateCard", "billingEntitlementRateCard", "creditGrantRateCard", "usageRateCard", "licenseRateCard", "entitlementOverageRateCard", "minimumCommitmentRateCard"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RateCardDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fixed_fee_rate_card
        if self.fixed_fee_rate_card:
            _dict['fixedFeeRateCard'] = self.fixed_fee_rate_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_entitlement_rate_card
        if self.billing_entitlement_rate_card:
            _dict['billingEntitlementRateCard'] = self.billing_entitlement_rate_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_grant_rate_card
        if self.credit_grant_rate_card:
            _dict['creditGrantRateCard'] = self.credit_grant_rate_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_rate_card
        if self.usage_rate_card:
            _dict['usageRateCard'] = self.usage_rate_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of license_rate_card
        if self.license_rate_card:
            _dict['licenseRateCard'] = self.license_rate_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entitlement_overage_rate_card
        if self.entitlement_overage_rate_card:
            _dict['entitlementOverageRateCard'] = self.entitlement_overage_rate_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimum_commitment_rate_card
        if self.minimum_commitment_rate_card:
            _dict['minimumCommitmentRateCard'] = self.minimum_commitment_rate_card.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RateCardDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fixedFeeRateCard": FixedFeeRateCard.from_dict(obj["fixedFeeRateCard"]) if obj.get("fixedFeeRateCard") is not None else None,
            "billingEntitlementRateCard": BillingEntitlementRateCard.from_dict(obj["billingEntitlementRateCard"]) if obj.get("billingEntitlementRateCard") is not None else None,
            "creditGrantRateCard": CreditGrantRateCard.from_dict(obj["creditGrantRateCard"]) if obj.get("creditGrantRateCard") is not None else None,
            "usageRateCard": UsageRateCard.from_dict(obj["usageRateCard"]) if obj.get("usageRateCard") is not None else None,
            "licenseRateCard": LicenseRateCard.from_dict(obj["licenseRateCard"]) if obj.get("licenseRateCard") is not None else None,
            "entitlementOverageRateCard": EntitlementOverageRateCard.from_dict(obj["entitlementOverageRateCard"]) if obj.get("entitlementOverageRateCard") is not None else None,
            "minimumCommitmentRateCard": MinimumCommitment.from_dict(obj["minimumCommitmentRateCard"]) if obj.get("minimumCommitmentRateCard") is not None else None
        })
        return _obj


