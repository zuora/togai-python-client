# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from togai_client.models.price_plan_details import PricePlanDetails
from togai_client.models.revenue_info import RevenueInfo
from togai_client.models.usage_lookup_range import UsageLookupRange
from typing import Optional, Set
from typing_extensions import Self

class CalculateRevenueResponse(BaseModel):
    """
    CalculateRevenueResponse
    """ # noqa: E501
    currency: StrictStr
    usage_lookup_range: Optional[UsageLookupRange] = Field(default=None, alias="usageLookupRange")
    price_plan_details: PricePlanDetails = Field(alias="pricePlanDetails")
    revenue_info: List[RevenueInfo] = Field(alias="revenueInfo")
    __properties: ClassVar[List[str]] = ["currency", "usageLookupRange", "pricePlanDetails", "revenueInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalculateRevenueResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of usage_lookup_range
        if self.usage_lookup_range:
            _dict['usageLookupRange'] = self.usage_lookup_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_plan_details
        if self.price_plan_details:
            _dict['pricePlanDetails'] = self.price_plan_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in revenue_info (list)
        _items = []
        if self.revenue_info:
            for _item_revenue_info in self.revenue_info:
                if _item_revenue_info:
                    _items.append(_item_revenue_info.to_dict())
            _dict['revenueInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalculateRevenueResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currency": obj.get("currency"),
            "usageLookupRange": UsageLookupRange.from_dict(obj["usageLookupRange"]) if obj.get("usageLookupRange") is not None else None,
            "pricePlanDetails": PricePlanDetails.from_dict(obj["pricePlanDetails"]) if obj.get("pricePlanDetails") is not None else None,
            "revenueInfo": [RevenueInfo.from_dict(_item) for _item in obj["revenueInfo"]] if obj.get("revenueInfo") is not None else None
        })
        return _obj


