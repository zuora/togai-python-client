# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateCustomerContactResponse(BaseModel):
    """
    CreateCustomerContactResponse
    """ # noqa: E501
    username: Annotated[str, Field(strict=True, max_length=50)]
    preferred_username: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, alias="preferredUsername")
    name: Annotated[str, Field(strict=True, max_length=50)]
    email: Optional[Annotated[str, Field(strict=True, max_length=320)]] = None
    phone: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    login_access: StrictBool = Field(alias="loginAccess")
    created_by: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, alias="createdBy")
    created_at: datetime = Field(alias="createdAt")
    verified: StrictBool
    __properties: ClassVar[List[str]] = ["username", "preferredUsername", "name", "email", "phone", "loginAccess", "createdBy", "createdAt", "verified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCustomerContactResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCustomerContactResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "preferredUsername": obj.get("preferredUsername"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "loginAccess": obj.get("loginAccess"),
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "verified": obj.get("verified")
        })
        return _obj


