# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from togai_client.models.query_column import QueryColumn
from togai_client.models.query_filter import QueryFilter
from togai_client.models.query_input_sort_inner import QueryInputSortInner
from typing import Optional, Set
from typing_extensions import Self

class QueryInput(BaseModel):
    """
    QueryInput
    """ # noqa: E501
    selects: List[QueryColumn]
    query_filters: Optional[List[QueryFilter]] = Field(default=None, alias="queryFilters")
    base_data_source: StrictStr = Field(alias="baseDataSource")
    sort: List[QueryInputSortInner]
    seek_values: Optional[List[StrictStr]] = Field(default=None, alias="seekValues")
    limit: StrictInt
    __properties: ClassVar[List[str]] = ["selects", "queryFilters", "baseDataSource", "sort", "seekValues", "limit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in selects (list)
        _items = []
        if self.selects:
            for _item_selects in self.selects:
                if _item_selects:
                    _items.append(_item_selects.to_dict())
            _dict['selects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in query_filters (list)
        _items = []
        if self.query_filters:
            for _item_query_filters in self.query_filters:
                if _item_query_filters:
                    _items.append(_item_query_filters.to_dict())
            _dict['queryFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sort (list)
        _items = []
        if self.sort:
            for _item_sort in self.sort:
                if _item_sort:
                    _items.append(_item_sort.to_dict())
            _dict['sort'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "selects": [QueryColumn.from_dict(_item) for _item in obj["selects"]] if obj.get("selects") is not None else None,
            "queryFilters": [QueryFilter.from_dict(_item) for _item in obj["queryFilters"]] if obj.get("queryFilters") is not None else None,
            "baseDataSource": obj.get("baseDataSource"),
            "sort": [QueryInputSortInner.from_dict(_item) for _item in obj["sort"]] if obj.get("sort") is not None else None,
            "seekValues": obj.get("seekValues"),
            "limit": obj.get("limit")
        })
        return _obj


