# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from togai_client.models.create_price_plan_details_override import CreatePricePlanDetailsOverride
from togai_client.models.purchase_plan_override import PurchasePlanOverride
from togai_client.models.purchase_type import PurchaseType
from togai_client.models.wallet_topup_details import WalletTopupDetails
from typing import Optional, Set
from typing_extensions import Self

class CreatePurchaseRequest(BaseModel):
    """
    Create a purchase for an account
    """ # noqa: E501
    price_plan_id: Optional[StrictStr] = Field(default=None, description="Id of the price plan, Required for ENTITLEMENT_GRANT, ASSOCIATION purchase", alias="pricePlanId")
    quantity: Optional[StrictInt] = None
    rate_card_quantities: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, alias="rateCardQuantities")
    idempotency_key: Optional[StrictStr] = Field(default=None, alias="idempotencyKey")
    purchase_plan_override: Optional[PurchasePlanOverride] = Field(default=None, alias="purchasePlanOverride")
    association_override: Optional[CreatePricePlanDetailsOverride] = Field(default=None, alias="associationOverride")
    wallet_topup_details: Optional[WalletTopupDetails] = Field(default=None, alias="walletTopupDetails")
    effective_from: Optional[date] = Field(default=None, alias="effectiveFrom")
    effective_until: Optional[date] = Field(default=None, alias="effectiveUntil")
    expiry_date: Optional[datetime] = Field(default=None, alias="expiryDate")
    type: Optional[PurchaseType] = None
    __properties: ClassVar[List[str]] = ["pricePlanId", "quantity", "rateCardQuantities", "idempotencyKey", "purchasePlanOverride", "associationOverride", "walletTopupDetails", "effectiveFrom", "effectiveUntil", "expiryDate", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePurchaseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of purchase_plan_override
        if self.purchase_plan_override:
            _dict['purchasePlanOverride'] = self.purchase_plan_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of association_override
        if self.association_override:
            _dict['associationOverride'] = self.association_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wallet_topup_details
        if self.wallet_topup_details:
            _dict['walletTopupDetails'] = self.wallet_topup_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePurchaseRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pricePlanId": obj.get("pricePlanId"),
            "quantity": obj.get("quantity"),
            "rateCardQuantities": obj.get("rateCardQuantities"),
            "idempotencyKey": obj.get("idempotencyKey"),
            "purchasePlanOverride": PurchasePlanOverride.from_dict(obj["purchasePlanOverride"]) if obj.get("purchasePlanOverride") is not None else None,
            "associationOverride": CreatePricePlanDetailsOverride.from_dict(obj["associationOverride"]) if obj.get("associationOverride") is not None else None,
            "walletTopupDetails": WalletTopupDetails.from_dict(obj["walletTopupDetails"]) if obj.get("walletTopupDetails") is not None else None,
            "effectiveFrom": obj.get("effectiveFrom"),
            "effectiveUntil": obj.get("effectiveUntil"),
            "expiryDate": obj.get("expiryDate"),
            "type": obj.get("type")
        })
        return _obj


