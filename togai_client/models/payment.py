# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from togai_client.models.external_payment_reference import ExternalPaymentReference
from togai_client.models.payment_line_item_record import PaymentLineItemRecord
from typing import Optional, Set
from typing_extensions import Self

class Payment(BaseModel):
    """
    Payment object
    """ # noqa: E501
    id: StrictStr
    description: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    account_id: StrictStr = Field(alias="accountId")
    external_payment_references: ExternalPaymentReference = Field(alias="externalPaymentReferences")
    line_item_records: List[PaymentLineItemRecord] = Field(alias="lineItemRecords")
    total_amount: Union[StrictFloat, StrictInt] = Field(alias="totalAmount")
    currency: StrictStr
    version: Union[StrictFloat, StrictInt]
    created_by: StrictStr = Field(alias="createdBy")
    created_at: datetime = Field(alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "description", "notes", "accountId", "externalPaymentReferences", "lineItemRecords", "totalAmount", "currency", "version", "createdBy", "createdAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of external_payment_references
        if self.external_payment_references:
            _dict['externalPaymentReferences'] = self.external_payment_references.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_item_records (list)
        _items = []
        if self.line_item_records:
            for _item_line_item_records in self.line_item_records:
                if _item_line_item_records:
                    _items.append(_item_line_item_records.to_dict())
            _dict['lineItemRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "notes": obj.get("notes"),
            "accountId": obj.get("accountId"),
            "externalPaymentReferences": ExternalPaymentReference.from_dict(obj["externalPaymentReferences"]) if obj.get("externalPaymentReferences") is not None else None,
            "lineItemRecords": [PaymentLineItemRecord.from_dict(_item) for _item in obj["lineItemRecords"]] if obj.get("lineItemRecords") is not None else None,
            "totalAmount": obj.get("totalAmount"),
            "currency": obj.get("currency"),
            "version": obj.get("version"),
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


