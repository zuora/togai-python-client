# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from togai_client.models.association_config import AssociationConfig
from typing import Optional, Set
from typing_extensions import Self

class UpdateAccountScheduleV2Request(BaseModel):
    """
    Request to dis/associate one or more schedules to an account
    """ # noqa: E501
    mode: Optional[StrictStr] = Field(default=None, description="Mode of request to create dis/association")
    effective_from: date = Field(description="Date of effectiveness of the association. The date is expected in YYYY-MM-DD format - Editing of a BILLING plan with deferredRevenue can be achieved with    effectiveFrom as start date of current cycle or using `retainStartOffset` option. ", alias="effectiveFrom")
    effective_until: date = Field(description="Date until which the association must be effective. The date is expected in YYYY-MM-DD format ", alias="effectiveUntil")
    association_config: Optional[AssociationConfig] = Field(default=None, alias="associationConfig")
    merge_schedules: Optional[StrictBool] = Field(default=None, description="If this flag is true, the schedules will be merged with the existing schedules of the account if possible. If this flag is false, the existing schedules will be replaced with the new schedules. Default value is false ", alias="mergeSchedules")
    __properties: ClassVar[List[str]] = ["mode", "effectiveFrom", "effectiveUntil", "associationConfig", "mergeSchedules"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASSOCIATE', 'DISASSOCIATE']):
            raise ValueError("must be one of enum values ('ASSOCIATE', 'DISASSOCIATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAccountScheduleV2Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of association_config
        if self.association_config:
            _dict['associationConfig'] = self.association_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAccountScheduleV2Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mode": obj.get("mode"),
            "effectiveFrom": obj.get("effectiveFrom"),
            "effectiveUntil": obj.get("effectiveUntil"),
            "associationConfig": AssociationConfig.from_dict(obj["associationConfig"]) if obj.get("associationConfig") is not None else None,
            "mergeSchedules": obj.get("mergeSchedules")
        })
        return _obj


