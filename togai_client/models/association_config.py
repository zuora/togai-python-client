# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from togai_client.models.pricing_cycle_config import PricingCycleConfig
from typing import Optional, Set
from typing_extensions import Self

class AssociationConfig(BaseModel):
    """
    AssociationConfig
    """ # noqa: E501
    price_plan_id: Optional[StrictStr] = Field(default=None, description="Id of the price plan if association request", alias="pricePlanId")
    schedule_id: Optional[StrictStr] = Field(default=None, description="If provided, rate cards and pricing rules will copied from this schedule", alias="scheduleId")
    pricing_cycle_config_override: Optional[PricingCycleConfig] = Field(default=None, alias="pricingCycleConfigOverride")
    retain_start_offsets: Optional[StrictBool] = Field(default=None, description="If this flag is true, current pricing cycle of the account on the date of association will continue rather  than the configurations of the newly associated price plan. Pricing cycle overrides specified  using  `pricePlanDetailsOverride` will take precedence over the pricing cycle configurations of  the new price plan that the account needs to migrate to. PricingCycleInterval of the existing plan and  the new plan must be same for this to work. We'll return a `400 BadRequest` otherwise. Examples:   - Ongoing plan (1st Oct to 30th Oct) - {dayOffset: 1, monthOffset: NIL}     New association (15th Oct to 15th Nov) of different price plan with retainStartOffsets option true      will use the same pricing cycle configuration {dayOffset: 1, monthOffset: NIL} rather than using the     pricing cycle configuration of the new price plan that the account needs to migrate to.   - Ongoing plan (1st Oct to 30th Oct) - {dayOffset: 1, monthOffset: NIL}     New association (1st Nov to 30th Nov) of different price plan with retainStartOffsets option true will     throw a `400 BadRequest` as no existing price plan configuration found on date of association ", alias="retainStartOffsets")
    __properties: ClassVar[List[str]] = ["pricePlanId", "scheduleId", "pricingCycleConfigOverride", "retainStartOffsets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssociationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pricing_cycle_config_override
        if self.pricing_cycle_config_override:
            _dict['pricingCycleConfigOverride'] = self.pricing_cycle_config_override.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssociationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pricePlanId": obj.get("pricePlanId"),
            "scheduleId": obj.get("scheduleId"),
            "pricingCycleConfigOverride": PricingCycleConfig.from_dict(obj["pricingCycleConfigOverride"]) if obj.get("pricingCycleConfigOverride") is not None else None,
            "retainStartOffsets": obj.get("retainStartOffsets")
        })
        return _obj


