# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from togai_client.models.price_plan_details import PricePlanDetails
from togai_client.models.price_plan_type import PricePlanType
from togai_client.models.pricing_rule import PricingRule
from typing import Optional, Set
from typing_extensions import Self

class PricePlanListData(BaseModel):
    """
    Data of price plan list
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Identifier of price plan")
    name: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Name of the price plan")
    version: StrictInt = Field(description="Version of the price plan")
    description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Description of price plan")
    status: StrictStr = Field(description="Status of Price plan")
    usage_meters: List[StrictStr] = Field(description="Usage meters id linked to the price plan", alias="usageMeters")
    price_plan_details: PricePlanDetails = Field(alias="pricePlanDetails")
    pricing_rules: Optional[List[PricingRule]] = Field(default=None, alias="pricingRules")
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    type: PricePlanType
    __properties: ClassVar[List[str]] = ["id", "name", "version", "description", "status", "usageMeters", "pricePlanDetails", "pricingRules", "createdAt", "updatedAt", "type"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DRAFT', 'ACTIVE', 'ARCHIVED']):
            raise ValueError("must be one of enum values ('DRAFT', 'ACTIVE', 'ARCHIVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricePlanListData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price_plan_details
        if self.price_plan_details:
            _dict['pricePlanDetails'] = self.price_plan_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pricing_rules (list)
        _items = []
        if self.pricing_rules:
            for _item_pricing_rules in self.pricing_rules:
                if _item_pricing_rules:
                    _items.append(_item_pricing_rules.to_dict())
            _dict['pricingRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricePlanListData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "usageMeters": obj.get("usageMeters"),
            "pricePlanDetails": PricePlanDetails.from_dict(obj["pricePlanDetails"]) if obj.get("pricePlanDetails") is not None else None,
            "pricingRules": [PricingRule.from_dict(_item) for _item in obj["pricingRules"]] if obj.get("pricingRules") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "type": obj.get("type")
        })
        return _obj


