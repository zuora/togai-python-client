# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PricePlanMigrationConfig(BaseModel):
    """
    Migrate all account associations of a price plan to another price plan
    """ # noqa: E501
    source_id: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Id of source price plan", alias="sourceId")
    source_version: StrictInt = Field(description="Version of the source price plan", alias="sourceVersion")
    target_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Id of target price plan", alias="targetId")
    target_version: Optional[StrictInt] = Field(default=None, description="Version of the target price plan", alias="targetVersion")
    migration_mode: StrictStr = Field(alias="migrationMode")
    retain_start_offsets: Optional[StrictBool] = Field(default=None, description="If this flag is true, current pricing cycle of the account on the date of association will continue rather  than the configurations of the newly associated price plan. Pricing cycle overrides specified  using  `pricePlanDetailsOverride` will take precedence over the pricing cycle configurations of  the new price plan that the account needs to migrate to. PricingCycleInterval of the existing plan and  the new plan must be same for this to work. We'll return a `400 BadRequest` otherwise. Examples:   - Ongoing plan (1st Oct to 30th Oct) - {dayOffset: 1, monthOffset: NIL}     New association (15th Oct to 15th Nov) of different price plan with retainStartOffsets option true      will use the same pricing cycle configuration {dayOffset: 1, monthOffset: NIL} rather than using the     pricing cycle configuration of the new price plan that the account needs to migrate to.   - Ongoing plan (1st Oct to 30th Oct) - {dayOffset: 1, monthOffset: NIL}     New association (1st Nov to 30th Nov) of different price plan with retainStartOffsets option true will     throw a `400 BadRequest` as no existing price plan configuration found on date of association ", alias="retainStartOffsets")
    is_price_plan_v2_migration: Optional[StrictBool] = Field(default=None, description="If this flag is true, the migration will be done for price plan v2. Default value is false ", alias="isPricePlanV2Migration")
    __properties: ClassVar[List[str]] = ["sourceId", "sourceVersion", "targetId", "targetVersion", "migrationMode", "retainStartOffsets", "isPricePlanV2Migration"]

    @field_validator('migration_mode')
    def migration_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['IMMEDIATE', 'IMMEDIATE_IGNORE_OVERRIDE', 'NEXT_CYCLE', 'NEXT_CYCLE_IGNORE_OVERRIDE', 'START_OF_CURRENT_CYCLE']):
            raise ValueError("must be one of enum values ('IMMEDIATE', 'IMMEDIATE_IGNORE_OVERRIDE', 'NEXT_CYCLE', 'NEXT_CYCLE_IGNORE_OVERRIDE', 'START_OF_CURRENT_CYCLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricePlanMigrationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricePlanMigrationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceId": obj.get("sourceId"),
            "sourceVersion": obj.get("sourceVersion"),
            "targetId": obj.get("targetId"),
            "targetVersion": obj.get("targetVersion"),
            "migrationMode": obj.get("migrationMode"),
            "retainStartOffsets": obj.get("retainStartOffsets"),
            "isPricePlanV2Migration": obj.get("isPricePlanV2Migration")
        })
        return _obj


