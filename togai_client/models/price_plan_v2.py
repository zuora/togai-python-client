# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from togai_client.models.price_plan_type import PricePlanType
from togai_client.models.pricing_cycle_config import PricingCycleConfig
from typing import Optional, Set
from typing_extensions import Self

class PricePlanV2(BaseModel):
    """
    PricePlanV2
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Name of the price plan")
    description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Description of price plan")
    type: PricePlanType
    pricing_cycle_config: Optional[PricingCycleConfig] = Field(default=None, alias="pricingCycleConfig")
    supported_currencies: List[StrictStr] = Field(description="List of currencies supported by the price plan", alias="supportedCurrencies")
    deferred_revenue: Optional[StrictBool] = Field(default=None, description="This option can be enabled while creating a price plan to opt for deferred revenue finalization. i.e, Togai will assume that the price plan may change any time during the pricing cycle and  thereby does not compute the revenue in near-real time.  This gives the flexibility of editing rate cards in price plan from beginning of the pricing cycle. Enabling this mode comes with the following limitations. 1. Following rate cards are not supported under a `deferredRevenue` plan     * creditGrantRateCards,     * billingEntitlementRateCards,     * entitlementOverageRateCards,     * IN_ADVANCE fixedFeeRateCards,     * IN_ADVANCE licenseRateCards 2. Metrics API return revenue metrics only after the grace period of the account's pricing cycle  (i.e, only once the invoice becomes DUE) ", alias="deferredRevenue")
    allow_ongoing_cycle_updates: Optional[StrictBool] = Field(default=None, description="Allow changes to price plan from the beginning of the ongoing cycle. ", alias="allowOngoingCycleUpdates")
    id: Annotated[str, Field(strict=True, max_length=50)]
    reference_id: Annotated[str, Field(strict=True, max_length=50)] = Field(alias="referenceId")
    version: StrictInt
    status: StrictStr
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["name", "description", "type", "pricingCycleConfig", "supportedCurrencies", "deferredRevenue", "allowOngoingCycleUpdates", "id", "referenceId", "version", "status", "createdAt", "updatedAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DRAFT', 'ACTIVE']):
            raise ValueError("must be one of enum values ('DRAFT', 'ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricePlanV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pricing_cycle_config
        if self.pricing_cycle_config:
            _dict['pricingCycleConfig'] = self.pricing_cycle_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricePlanV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "pricingCycleConfig": PricingCycleConfig.from_dict(obj["pricingCycleConfig"]) if obj.get("pricingCycleConfig") is not None else None,
            "supportedCurrencies": obj.get("supportedCurrencies"),
            "deferredRevenue": obj.get("deferredRevenue"),
            "allowOngoingCycleUpdates": obj.get("allowOngoingCycleUpdates"),
            "id": obj.get("id"),
            "referenceId": obj.get("referenceId"),
            "version": obj.get("version"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


