# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from togai_client.models.attribute import Attribute
from typing import Optional, Set
from typing_extensions import Self

class Event(BaseModel):
    """
    Contents of the event
    """ # noqa: E501
    schema_name: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="Name of the Event Schema.  Know more about [event schema](https://docs.togai.com/docs/event-schemas) ", alias="schemaName")
    id: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Togai restricts users to ingest events with same id within a period of *45 days*. This restriction is common for [/entitled API](/api-reference/entitlements/ingest-event-if-a-user-is-entitled-to-a-feature), [/ingest API](/api-reference/event-ingestion/ingest-events-to-togai) and [/ingestBatch API](/api-reference/event-ingestion/ingest-events-to-togai-in-batch). i.e, an id used on /ingest API will not be allowed on /ingestBatch or /entitled APIs")
    timestamp: datetime = Field(description="Source time stamp of the event. This timestamp must be in ISO 8601 format.")
    account_id: Annotated[str, Field(strict=True, max_length=512)] = Field(description="The event will be associated with the provided account", alias="accountId")
    attributes: Annotated[List[Attribute], Field(min_length=0, max_length=10)] = Field(description="Attributes are numeric values. It can be usage metric which you push to Togai")
    dimensions: Dict[str, Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = Field(description="Dimensions are tags/labels associated with the events.")
    __properties: ClassVar[List[str]] = ["schemaName", "id", "timestamp", "accountId", "attributes", "dimensions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schemaName": obj.get("schemaName"),
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "accountId": obj.get("accountId"),
            "attributes": [Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "dimensions": obj.get("dimensions")
        })
        return _obj


