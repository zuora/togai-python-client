# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class IngestionStatus(BaseModel):
    """
    Status about the event ingestion.
    """ # noqa: E501
    status: StrictStr = Field(description="Ingestion status")
    status_description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="statusDescription")
    __properties: ClassVar[List[str]] = ["status", "statusDescription"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['INGESTION_IN_PROGRESS', 'INGESTION_FAILED', 'INGESTION_FAILED_SCHEMA_NOT_DEFINED', 'INGESTION_FAILED_ENRICHMENT_FAILED', 'INGESTION_FAILED_UNITS_INVALID', 'INGESTION_COMPLETED_NO_MATCHING_METERS', 'INGESTION_COMPLETED_EVENT_METERED', 'INGESTION_COMPLETED_EVENT_NOT_METERED', 'INGESTION_FAILED_PAST_GRACE_PERIOD', 'INGESTION_FAILED_ACCOUNT_NOT_FOUND', 'INGESTION_FAILED_DUPLICATE_EVENT', 'INGESTION_FAILED_NO_EVENT_ID', 'INGESTION_FAILED_INVALID_NAMED_LICENSE_EVENT', 'INGESTION_FAILED_INSUFFICIENT_CREDITS', 'REVERTED', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('INGESTION_IN_PROGRESS', 'INGESTION_FAILED', 'INGESTION_FAILED_SCHEMA_NOT_DEFINED', 'INGESTION_FAILED_ENRICHMENT_FAILED', 'INGESTION_FAILED_UNITS_INVALID', 'INGESTION_COMPLETED_NO_MATCHING_METERS', 'INGESTION_COMPLETED_EVENT_METERED', 'INGESTION_COMPLETED_EVENT_NOT_METERED', 'INGESTION_FAILED_PAST_GRACE_PERIOD', 'INGESTION_FAILED_ACCOUNT_NOT_FOUND', 'INGESTION_FAILED_DUPLICATE_EVENT', 'INGESTION_FAILED_NO_EVENT_ID', 'INGESTION_FAILED_INVALID_NAMED_LICENSE_EVENT', 'INGESTION_FAILED_INSUFFICIENT_CREDITS', 'REVERTED', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IngestionStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IngestionStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "statusDescription": obj.get("statusDescription")
        })
        return _obj


