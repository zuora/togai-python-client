# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from togai_client.models.metric_name import MetricName
from togai_client.models.metric_query_filter_entry import MetricQueryFilterEntry
from typing import Optional, Set
from typing_extensions import Self

class MetricQuery(BaseModel):
    """
    Object representing a single metrics query
    """ # noqa: E501
    id: StrictStr = Field(description="Mandatory  for all request.  User defined ID for identifying the request for your internal reference ")
    name: MetricName
    aggregation_period: StrictStr = Field(description="Set the aggregation period. Allowed periods are HOUR, DAY, WEEK, MONTH", alias="aggregationPeriod")
    group_by: Optional[StrictStr] = Field(default=None, description="Group your metric with a groupBy field.  Allowed fields are  ACCOUNT_ID EVENT_STATUS  SCHEMA_NAME  USAGE_METER_ID [Use BILLABLE_ID as this will be deprecated soon...] BILLABLE_ID RAW_EVENT_STATUS Please refer the table above for the list of combinations allowed in the groupBy ", alias="groupBy")
    configs: Optional[Dict[str, StrictStr]] = Field(default=None, description="Configurations. | Metric Name       | Config Key | Allowed Values  | Default value |              Description          | |-------------------|------------|-----------------|---------------|-----------------------------------| | REVENUE           | CURRENCY   | BASE or INVOICE | BASE          | currency to return the revenue in | | REVENUE_FOR_CYCLE | CURRENCY   | BASE or INVOICE | BASE          | currency to return the revenue in | ")
    filters: Optional[Annotated[List[MetricQueryFilterEntry], Field(min_length=1, max_length=5)]] = Field(default=None, description="Filter on specific fields.  Refer possible fieldNames and fieldValues from the table above. ")
    __properties: ClassVar[List[str]] = ["id", "name", "aggregationPeriod", "groupBy", "configs", "filters"]

    @field_validator('aggregation_period')
    def aggregation_period_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['HOUR', 'DAY', 'WEEK', 'MONTH']):
            raise ValueError("must be one of enum values ('HOUR', 'DAY', 'WEEK', 'MONTH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name") if obj.get("name") is not None else MetricName.EVENTS,
            "aggregationPeriod": obj.get("aggregationPeriod") if obj.get("aggregationPeriod") is not None else 'DAY',
            "groupBy": obj.get("groupBy"),
            "configs": obj.get("configs"),
            "filters": [MetricQueryFilterEntry.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None
        })
        return _obj


