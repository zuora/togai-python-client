# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from togai_client.models.currency_config import CurrencyConfig
from togai_client.models.entitlement_overage_config import EntitlementOverageConfig
from togai_client.models.license_entries_config import LicenseEntriesConfig
from togai_client.models.named_license_entries_config import NamedLicenseEntriesConfig
from togai_client.models.price_plan_details_config import PricePlanDetailsConfig
from togai_client.models.proration_config import ProrationConfig
from togai_client.models.usage_config import UsageConfig
from typing import Optional, Set
from typing_extensions import Self

class CalculateRevenueRequest(BaseModel):
    """
    Request to get revenue details
    """ # noqa: E501
    currency_config: CurrencyConfig = Field(alias="currencyConfig")
    price_plan_details_config: PricePlanDetailsConfig = Field(alias="pricePlanDetailsConfig")
    usage_config: UsageConfig = Field(alias="usageConfig")
    license_entries_config: LicenseEntriesConfig = Field(alias="licenseEntriesConfig")
    named_license_entries_config: Optional[NamedLicenseEntriesConfig] = Field(default=None, alias="namedLicenseEntriesConfig")
    proration_config: Optional[ProrationConfig] = Field(default=None, alias="prorationConfig")
    entitlement_overage_config: Optional[EntitlementOverageConfig] = Field(default=None, alias="entitlementOverageConfig")
    __properties: ClassVar[List[str]] = ["currencyConfig", "pricePlanDetailsConfig", "usageConfig", "licenseEntriesConfig", "namedLicenseEntriesConfig", "prorationConfig", "entitlementOverageConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalculateRevenueRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency_config
        if self.currency_config:
            _dict['currencyConfig'] = self.currency_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_plan_details_config
        if self.price_plan_details_config:
            _dict['pricePlanDetailsConfig'] = self.price_plan_details_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_config
        if self.usage_config:
            _dict['usageConfig'] = self.usage_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of license_entries_config
        if self.license_entries_config:
            _dict['licenseEntriesConfig'] = self.license_entries_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of named_license_entries_config
        if self.named_license_entries_config:
            _dict['namedLicenseEntriesConfig'] = self.named_license_entries_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proration_config
        if self.proration_config:
            _dict['prorationConfig'] = self.proration_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entitlement_overage_config
        if self.entitlement_overage_config:
            _dict['entitlementOverageConfig'] = self.entitlement_overage_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalculateRevenueRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currencyConfig": CurrencyConfig.from_dict(obj["currencyConfig"]) if obj.get("currencyConfig") is not None else None,
            "pricePlanDetailsConfig": PricePlanDetailsConfig.from_dict(obj["pricePlanDetailsConfig"]) if obj.get("pricePlanDetailsConfig") is not None else None,
            "usageConfig": UsageConfig.from_dict(obj["usageConfig"]) if obj.get("usageConfig") is not None else None,
            "licenseEntriesConfig": LicenseEntriesConfig.from_dict(obj["licenseEntriesConfig"]) if obj.get("licenseEntriesConfig") is not None else None,
            "namedLicenseEntriesConfig": NamedLicenseEntriesConfig.from_dict(obj["namedLicenseEntriesConfig"]) if obj.get("namedLicenseEntriesConfig") is not None else None,
            "prorationConfig": ProrationConfig.from_dict(obj["prorationConfig"]) if obj.get("prorationConfig") is not None else None,
            "entitlementOverageConfig": EntitlementOverageConfig.from_dict(obj["entitlementOverageConfig"]) if obj.get("entitlementOverageConfig") is not None else None
        })
        return _obj


