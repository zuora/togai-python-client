# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from togai_client.models.create_price_plan_details import CreatePricePlanDetails
from typing import Optional, Set
from typing_extensions import Self

class PricePlanDetailsConfig(BaseModel):
    """
    Configuration for getting the usage rate card
    """ # noqa: E501
    mode: StrictStr = Field(description="Mode to get the usage rate card - CUSTOM: Use the price plan details provided in the request - PRICE_PLAN: Use the usage rate cards of the given price plan - ACCOUNT: Use the usage rate cards of a associated price plan of the given account ")
    price_plan_details: Optional[CreatePricePlanDetails] = Field(default=None, alias="pricePlanDetails")
    price_plan_id: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Id of the price plan, this will be considered if mode is PRICE_PLAN", alias="pricePlanId")
    account_id: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Id of the account, this will be considered if mode is ACCOUNT", alias="accountId")
    effective_on: Optional[datetime] = Field(default=None, description="Will be used for getting the usage rate card, only used if mode is ACCOUNT or PRICE_PLAN", alias="effectiveOn")
    pricing_cycle_ordinal: Optional[StrictInt] = Field(default=None, description="nth cycle, will be used to calculate revenue for the particular cycle, only used if mode is CUSTOM or PRICE_PLAN", alias="pricingCycleOrdinal")
    __properties: ClassVar[List[str]] = ["mode", "pricePlanDetails", "pricePlanId", "accountId", "effectiveOn", "pricingCycleOrdinal"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CUSTOM', 'PRICE_PLAN', 'ACCOUNT']):
            raise ValueError("must be one of enum values ('CUSTOM', 'PRICE_PLAN', 'ACCOUNT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricePlanDetailsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price_plan_details
        if self.price_plan_details:
            _dict['pricePlanDetails'] = self.price_plan_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricePlanDetailsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mode": obj.get("mode"),
            "pricePlanDetails": CreatePricePlanDetails.from_dict(obj["pricePlanDetails"]) if obj.get("pricePlanDetails") is not None else None,
            "pricePlanId": obj.get("pricePlanId"),
            "accountId": obj.get("accountId"),
            "effectiveOn": obj.get("effectiveOn"),
            "pricingCycleOrdinal": obj.get("pricingCycleOrdinal")
        })
        return _obj


