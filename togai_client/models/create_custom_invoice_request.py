# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from togai_client.models.custom_invoice_line_item import CustomInvoiceLineItem
from typing import Optional, Set
from typing_extensions import Self

class CreateCustomInvoiceRequest(BaseModel):
    """
    Payload to create invoice
    """ # noqa: E501
    account_id: StrictStr = Field(alias="accountId")
    owner_type: Optional[StrictStr] = Field(default=None, alias="ownerType")
    start_date: datetime = Field(alias="startDate")
    end_date: datetime = Field(alias="endDate")
    idempotency_key: Optional[StrictStr] = Field(default=None, alias="idempotencyKey")
    status: StrictStr = Field(description="Status to create an invoice in.")
    line_items: Annotated[List[CustomInvoiceLineItem], Field(min_length=1, max_length=50)] = Field(alias="lineItems")
    auto_advance: Optional[StrictBool] = Field(default=None, description="This property defines the behaviour of status transition of the invoice. If true, invoice auto transitions from `DRAFT` to `DUE` or `PAID` at the end of pricing cycle. If false, the invoice’s state doesn’t automatically advance without an explicit action. Default: false ", alias="autoAdvance")
    apply_credits: Optional[StrictBool] = Field(default=None, description="This property defines the behaviour of whether or not to use credits to net off with the invoice amount. Default: true ", alias="applyCredits")
    apply_wallet_balance: Optional[StrictBool] = Field(default=None, description="This property defines the behaviour of whether or not to use wallet amount to net off with the invoice amount. Default: true ", alias="applyWalletBalance")
    __properties: ClassVar[List[str]] = ["accountId", "ownerType", "startDate", "endDate", "idempotencyKey", "status", "lineItems", "autoAdvance", "applyCredits", "applyWalletBalance"]

    @field_validator('owner_type')
    def owner_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCOUNT', 'INVOICE_GROUP']):
            raise ValueError("must be one of enum values ('ACCOUNT', 'INVOICE_GROUP')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DRAFT', 'DUE', 'PAID']):
            raise ValueError("must be one of enum values ('DRAFT', 'DUE', 'PAID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCustomInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCustomInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "ownerType": obj.get("ownerType"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "idempotencyKey": obj.get("idempotencyKey"),
            "status": obj.get("status"),
            "lineItems": [CustomInvoiceLineItem.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "autoAdvance": obj.get("autoAdvance"),
            "applyCredits": obj.get("applyCredits"),
            "applyWalletBalance": obj.get("applyWalletBalance")
        })
        return _obj


