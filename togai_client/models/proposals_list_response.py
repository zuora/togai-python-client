# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from togai_client.models.purchase_status import PurchaseStatus
from togai_client.models.purchase_type import PurchaseType
from togai_client.models.wallet_topup_details import WalletTopupDetails
from typing import Optional, Set
from typing_extensions import Self

class ProposalsListResponse(BaseModel):
    """
    Represents a Proposal for List Response
    """ # noqa: E501
    id: StrictStr
    price_plan_id: Optional[StrictStr] = Field(default=None, alias="pricePlanId")
    price_plan_name: Optional[StrictStr] = Field(default=None, alias="pricePlanName")
    price_plan_version: Optional[StrictInt] = Field(default=None, alias="pricePlanVersion")
    status: PurchaseStatus
    wallet_topup_details: Optional[WalletTopupDetails] = Field(default=None, alias="walletTopupDetails")
    idempotency_key: Optional[StrictStr] = Field(default=None, alias="idempotencyKey")
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    expiry_date: Optional[datetime] = Field(default=None, alias="expiryDate")
    payment_mode: StrictStr = Field(alias="paymentMode")
    type: PurchaseType
    __properties: ClassVar[List[str]] = ["id", "pricePlanId", "pricePlanName", "pricePlanVersion", "status", "walletTopupDetails", "idempotencyKey", "createdAt", "updatedAt", "expiryDate", "paymentMode", "type"]

    @field_validator('payment_mode')
    def payment_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PREPAID', 'POSTPAID']):
            raise ValueError("must be one of enum values ('PREPAID', 'POSTPAID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProposalsListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wallet_topup_details
        if self.wallet_topup_details:
            _dict['walletTopupDetails'] = self.wallet_topup_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProposalsListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "pricePlanId": obj.get("pricePlanId"),
            "pricePlanName": obj.get("pricePlanName"),
            "pricePlanVersion": obj.get("pricePlanVersion"),
            "status": obj.get("status"),
            "walletTopupDetails": WalletTopupDetails.from_dict(obj["walletTopupDetails"]) if obj.get("walletTopupDetails") is not None else None,
            "idempotencyKey": obj.get("idempotencyKey"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "expiryDate": obj.get("expiryDate"),
            "paymentMode": obj.get("paymentMode"),
            "type": obj.get("type")
        })
        return _obj


