# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from togai_client.models.pricing_rule_changes_log import PricingRuleChangesLog
from togai_client.models.pricing_rule_info import PricingRuleInfo
from togai_client.models.pricing_rules_values import PricingRulesValues
from typing import Optional, Set
from typing_extensions import Self

class PricingRulesLog(BaseModel):
    """
    Pricing Rules Logs
    """ # noqa: E501
    id: StrictStr
    type: Optional[StrictStr] = None
    order: StrictInt
    changes: PricingRuleChangesLog
    rule: Optional[PricingRuleInfo] = None
    variables_value: Optional[Dict[str, PricingRulesValues]] = Field(default=None, alias="variablesValue")
    __properties: ClassVar[List[str]] = ["id", "type", "order", "changes", "rule", "variablesValue"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONDITION_TRUE', 'CONDITION_FALSE', 'CONDITION_ERROR', 'COMPUTATION_ERROR']):
            raise ValueError("must be one of enum values ('CONDITION_TRUE', 'CONDITION_FALSE', 'CONDITION_ERROR', 'COMPUTATION_ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingRulesLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of changes
        if self.changes:
            _dict['changes'] = self.changes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule
        if self.rule:
            _dict['rule'] = self.rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in variables_value (dict)
        _field_dict = {}
        if self.variables_value:
            for _key_variables_value in self.variables_value:
                if self.variables_value[_key_variables_value]:
                    _field_dict[_key_variables_value] = self.variables_value[_key_variables_value].to_dict()
            _dict['variablesValue'] = _field_dict
        # set to None if variables_value (nullable) is None
        # and model_fields_set contains the field
        if self.variables_value is None and "variables_value" in self.model_fields_set:
            _dict['variablesValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingRulesLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "order": obj.get("order"),
            "changes": PricingRuleChangesLog.from_dict(obj["changes"]) if obj.get("changes") is not None else None,
            "rule": PricingRuleInfo.from_dict(obj["rule"]) if obj.get("rule") is not None else None,
            "variablesValue": dict(
                (_k, PricingRulesValues.from_dict(_v))
                for _k, _v in obj["variablesValue"].items()
            )
            if obj.get("variablesValue") is not None
            else None
        })
        return _obj


