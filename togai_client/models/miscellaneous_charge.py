# coding: utf-8

"""
    Togai Apis

    APIs for Togai App

    The version of the OpenAPI document: 1.0
    Contact: engg@togai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MiscellaneousCharge(BaseModel):
    """
    Miscellaneous charges are the charges that can be added to the invoice. A charge must either have rate and quantity or value. In case of rate and quantity, the value must not be provided as it is automatically calculated as (rate * quantity).
    """ # noqa: E501
    name: StrictStr = Field(description="Name of the miscellaneous charge")
    rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rate of the charge")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Quantity of the charge")
    value: Optional[StrictStr] = Field(default=None, description="Value of the charge Possible values: 1. Fixed number [Example: 10] 2. Json Logic [Example: {\"*\": [{\"var\": \"um.lineitem.id\"}, 0.1]}]    You can use all line item ids as variables in the json logic ")
    consider_for_revenue: Optional[StrictBool] = Field(default=False, description="Specifies whether to consider this miscellaneous charge for revenue or not", alias="considerForRevenue")
    __properties: ClassVar[List[str]] = ["name", "rate", "quantity", "value", "considerForRevenue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MiscellaneousCharge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MiscellaneousCharge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "rate": obj.get("rate"),
            "quantity": obj.get("quantity"),
            "value": obj.get("value"),
            "considerForRevenue": obj.get("considerForRevenue") if obj.get("considerForRevenue") is not None else False
        })
        return _obj


